git add -A 
Update the index not only where the working tree has a file matching <pathspec> but also where the index already has an entry. This adds, modifies, and removes index entries to match the working tree.

If no <pathspec> is given when -A option is used, all files in the entire working tree are updated (old versions of Git used to limit the update to the current directory and its subdirectories)

git commit 
git-commit - Record changes to the repository

If you make a commit and then find a mistake immediately after that, you can recover from it with git reset.

git push

git-push - Update remote refs along with associated objects

Updates remote refs using local refs, while sending objects necessary to complete the given refs.

You can make interesting things happen to a repository every time you push into it, by setting up hooks there. See documentation for git-receive-pack[1].

When the command line does not specify where to push with the <repository> argument, branch.*.remote configuration for the current branch is consulted to determine where to push. If the configuration is missing, it defaults to origin.

git stash

Stash the changes in a dirty working directory away

Use git stash when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the HEAD commit.

The modifications stashed away by this command can be listed with git stash list, inspected with git stash show, and restored (potentially on top of a different commit) with git stash apply. Calling git stash without any arguments is equivalent to git stash push. A stash is by default listed as "WIP on branchname …​", but you can give a more descriptive message on the command line when you create one.

The latest stash you created is stored in refs/stash; older stashes are found in the reflog of this reference and can be named using the usual reflog syntax (e.g. stash@{0} is the most recently created stash, stash@{1} is the one before it, stash@{2.hours.ago} is also possible). Stashes may also be referenced by specifying just the stash index (e.g. the integer n is equivalent to stash@{n}).

pull requvest

git pull
Згенеруйте запит із проханням передати ваш попередній проект для отримання змін у своєму дереві. Запит, виведений на стандартний вихід, починається з опису гілки, підсумовує зміни та вказує, звідки їх можна отримати.

Очікується, що вихідний проект матиме комміт з іменем <start>, а вихідні дані просять його інтегрувати зміни, які ви внесли з часу цього коміту, аж до коміту з іменем <end>, відвідавши репозиторій з іменем <URL>.

git new branche
git merge
git pull requvest
psr4
git ignor

HW 
Rest
Http
 composer{
 1. Програма, що працює в зв'язці з рнр.
 2. Консольна програма: команди + немає графічного дизайну.
 3. Менджер залежночтей для рнр. 

 Існує "проект"  також вже готові "пакети", "бібліотеки". 
 Компосер - це програма для підключення та управління цими пакетами в рнр проекті. (пакетний менджер). 

 Практика "+":
 - менше рутинни ручних підключень бібліотек
 - автоматичне оновлення бібліотек. 
 - взаємозалежність бібліотек між собою вимагає підключень багатьох бібліотек 
 - перенос проекта на сервер стає простішим.
 - працювати з фрейворками неможливо без компосера (симфоні, ларавель)
  }

 http rest{
 Ми розробляєм веб проект. В межах сервера все працює. Коли потрібно з віддаленого сервіса, чи клієнти з телефону, сайту хочуть отримати дані, взаємодіяти. 

HTTP 
Протокол - домовленість, як відправляти та приймати інформацію, та як її розуміти.
1. Спосіб передачі
2. Формат сигналів

HTTP запит:
-URL
-Заголовок
-ТІло запиту

HTTP відповідь
-Код відповіді
-Заголовки
-Тіло відповіді

URI -частина адреси без домена

URL = домен [example.com]/URI[example]

 Всі системи які взаємодіють різнію. Щоб працювати існує REST. 
 REST - архітектурний стиль,  6 правил, як написати свій веб застосунок так, щоб системи обмінювались данними.

 REST API будується на кількох ключових принципах, які роблять його ефективним і гнучким інструментом для обміну даними.

1. Stateless: чому кожен HTTP-запит відбувається в повній ізоляції
REST API працює в режимі “без стану” (stateless), що означає, що кожен HTTP-запит, надісланий на сервер, містить усі необхідні дані для його обробки. Сервер не зберігає інформацію про попередні запити від клієнта. Це робить систему більш надійною та масштабованою.

2.Client-Server: автономність клієнта і сервера та їхня взаємодія
REST API суворо розділяє клієнтську та серверну частини програми. Це означає, що вони можуть розвиватися незалежно одна від одної. Клієнт може бути веб-браузером, мобільним додатком або будь-яким іншим клієнтським додатком, а сервер може бути написаний будь-якою мовою програмування.

3.Uniform Interface: чотири інтерфейси для досягнення однаковості
REST API спирається на чотири основні інтерфейси: ресурси, HTTP-методи (GET, POST, PUT, DELETE), представлення ресурсів (як дані подано клієнту), і посилання між ресурсами. Це створює однаковість у способі взаємодії клієнта і сервера.

4. Cacheable: як кешування покращує продуктивність програми
REST API підтримує кешування, що означає, що клієнт може тимчасово зберігати дані, щоб зменшити навантаження на сервер і поліпшити продуктивність.

5. Layered System: переваги шарової системи архітектури
Сервери REST API можна організувати в шари, що робить їх більш гнучкими і масштабованими. Кожен шар виконує певні функції, і їх можна додавати або видаляти без зміни клієнтського коду.

6. Code on Demand: необов’язкове обмеження, що дозволяє завантажувати код клієнта

Цей принцип є необов’язковим і надає можливість серверу надсилати клієнту виконуваний код. Це рідко використовується і потребує додаткових заходів безпеки.

Загалом, принципи rest api забезпечують ефективну та гнучку взаємодію між клієнтом і сервером, а також стандартизацію, надійність і стійкість системи.


 
 Написаний за правилами називається RESTful.

 Коли ми зробимо застосунок будуть список URL адрес, за якими буде проходити взаємодія.

 Використовуються такі методи:
 -GET(отримати)
 -POST(зберегти)
 -PUT(обновити)
 -DELETE(видалити)
 }
 routing